---
description:
globs:
alwaysApply: false
---
# Clicker RPG Structure and Iteration Guide

This document outlines the structure of the Simple Clicker RPG project contained within [click-rpg.html](mdc:click-rpg.html) and provides guidance on how to logically iterate on its features.

## File Structure

The entire game (HTML, CSS, JavaScript) is contained within a single file: [click-rpg.html](mdc:click-rpg.html).

## Code Breakdown

### 1. HTML (`<body>`)
- Defines the user interface structure.
- Key sections are wrapped in `<div>` elements with IDs for easy targeting by JavaScript:
    - `player-stats`: Displays hero gold, click damage, crit chance/multiplier.
    - `helper-stats`: Displays helper level and DPS information.
    - `enemy-display`: Shows the current enemy (name, emoji, HP bar, gold reward) and damage popups (`#damage-popup-area`).
    - `attack-button`: The main interaction button.
    - `upgrades`: Contains the grid of upgrade buttons (`#upgrade-click-button`, `#upgrade-crit-chance-button`, `#upgrade-helper-button`).
    - `feedback`, `achievement-feedback`: Areas for displaying messages to the player.

### 2. CSS (`<style>`)
- Defines the visual appearance, layout, and animations.
- Uses CSS variables (`:root`) extensively for easy theming (dark theme).
- Includes styles for:
    - Basic layout and typography.
    - Section styling.
    - Stat display formatting.
    - Enemy HP bar appearance and color changes based on health percentage.
    - Button states (normal, hover, active, disabled).
    - Damage popup animations and styles (normal, crit, dps).
    - Enemy shake and defeat animations.
    - Basic mobile responsiveness (`@media`).

### 3. JavaScript (`<script>`)
- Contains all game logic and state management.
- **State Management:**
    - `state`: A central JavaScript object holding all dynamic game data (player gold, stats, upgrade costs/levels, enemy status, progress trackers, scaling factors). Modifying game balance often involves tuning values within this object initially.
- **Constants:**
    - `enemyTypes`, `bossTypes`: Arrays defining available enemies/bosses with names and emojis.
    - `achievements`: Array defining achievements, their conditions, and rewards.
- **DOM References:**
    - `display`: An object caching references to key HTML elements for efficient UI updates.
- **Core Functions:**
    - `updateDisplay()`: Updates all relevant parts of the HTML based on the current `state`. Crucial for reflecting changes.
    - `spawnEnemy()`: Handles selecting, scaling, and displaying a new enemy (or boss).
    - `dealDamage()`: Applies damage to the enemy, handles enemy defeat logic (gold reward, spawning next enemy), shows damage popups.
    - `attackEnemy()`: Triggered by player clicks/spacebar; calculates damage (including crits) and calls `dealDamage`.
    - `applyDPS()`: Periodically called by `setInterval` to apply helper damage.
    - `buyUpgrade(type)`: Handles the logic for purchasing upgrades (checking cost, updating state, calculating next cost).
    - `checkAchievements(trigger, details)`: Checks if any achievement conditions are met based on game events.
- **Utility Functions:**
    - `formatNumber()`: Formats large numbers with suffixes (k, M, B...).
    - `showFeedback()`, `showDamagePopup()`, `triggerVisualDamageEffect()`: Handle UI feedback and effects.
- **Initialization:**
    - `initGame()`: Sets up the initial game state, spawns the first enemy, starts the DPS interval, and attaches event listeners.
    - Event listeners are attached to buttons and the spacebar keydown event.

## Logical Iteration Strategy

1.  **Adding New Enemies/Bosses:**
    - Add new entries to the `enemyTypes` or `bossTypes` arrays.
    - Consider adjusting `bossLevelInterval` or scaling formulas in `spawnEnemy` if needed.
2.  **Adding New Upgrades:**
    - Add new properties to the `state` object for the upgrade's level, cost, scaling, and effect.
    - Add corresponding HTML elements (button, stat display) in the relevant sections.
    - Add references to the new elements in the `display` object.
    - Extend the `buyUpgrade()` function with a new `case` for your upgrade type.
    - Update `updateDisplay()` to show the new stat and manage the new upgrade button's state (cost, disabled status).
    - Modify core logic functions (e.g., `attackEnemy`, `calculateDPS`) if the upgrade affects them directly.
3.  **Adding New Achievements:**
    - Add a new object to the `achievements` array with `id`, `desc`, `condition` function, `reward` function, `emoji`, and `achieved: false`.
    - Ensure the `condition` function correctly uses the `trigger` and `details` arguments passed by `checkAchievements`, or relies purely on the global `state`.
4.  **Balancing:**
    - Primarily adjust initial values and scaling factors within the `state` object (e.g., `baseUpgrade...Cost`, `upgrade...CostScale`, `enemyHPBase`, `enemyHPScale`, `critChanceIncrement`, `helperBaseDamage`).
    - Modify formulas within functions like `spawnEnemy`, `getNextClickDamage`, or `buyUpgrade` for more complex balance changes.
5.  **Visual Changes:**
    - Modify CSS rules within the `<style>` tags. Leverage the existing CSS variables for theme consistency.
    - Adjust animations or add new ones.
    - Modify HTML structure if necessary, remembering to update JavaScript references in the `display` object if IDs change.
